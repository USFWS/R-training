[["index.html", "R Course: Data Manipulation and Visualization 1 Overview", " R Course: Data Manipulation and Visualization March 04, 2022 1 Overview  "],["review.html", "2 Review 2.1 Data types 2.2 Data structures 2.3 Functions", " 2 Review 2.1 Data types # numeric: x &lt;- 5 # string or character: y &lt;- &quot;CHN&quot; # Boolean: w &lt;- TRUE !w ## [1] FALSE # factor (kind of like a hybrid of numeric and string): my_factor &lt;- factor(x=c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;), levels=c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;), ordered=TRUE) my_factor ## [1] a b c ## Levels: a &lt; b &lt; c 2.2 Data structures A vector is a collection of like-objects: # a vector of strings: x &lt;- c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;) # a vector of numbers: y &lt;- c(1,2,3) A data frame is like a spreadsheet, e.g., it has rows and columns: my_df &lt;- data.frame(&quot;field_1&quot;=1:3, &quot;field_2&quot;=4:6, &quot;field_3&quot;=7:9) my_df ## field_1 field_2 field_3 ## 1 1 4 7 ## 2 2 5 8 ## 3 3 6 9 A list is similar to a vector except the objects dont have to be of the same type: my_list &lt;- list(1, &quot;a&quot;, c(5:9), my_df) my_list ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] 5 6 7 8 9 ## ## [[4]] ## field_1 field_2 field_3 ## 1 1 4 7 ## 2 2 5 8 ## 3 3 6 9 2.3 Functions A function is a set of code that has a name and zero or more parameters You run the function using its name and you pass in objects (e.g., numbers, strings, data frames) as arguments. Note that some parameters are required and some are optional meaning they have default values (if you dont set them explicitly, the default values are used). The help page for a given function will indicate which parameters are required and which have default values. If a function has parameter(s), arguments can generally be passed in according to the parameter name(s) and/or the argument positions. Example The mean() function returns the arithmetic mean of a vector of numbers. It has three parameters called x, trim, and na.rm (plus an option for additional parameters that we dont need here). The parameter x takes the vector of numbers and is required, trim controls the number of observations that are trimmed from each end of x before the mean is computed (if you want that behavior) and has a default value of 0, and na.rm is a Boolean indicating whether any NA values should be removed before the mean is computed and has a default of FALSE. If were only using the first parameter, we can choose whether or not to use the name x: mean(x=1:3) ## [1] 2 mean(1:3) ## [1] 2 If you want to set all three parameters, you can omit names if theyre in the original order: mean(x=c(0,NA,1,2,3,4), trim=1, na.rm=TRUE) ## [1] 2 mean(c(0,NA,1,2,3,4), 1, TRUE) ## [1] 2 # This would produce an error because mean() expects the first argument to be a numeric vector: # mean(TRUE, c(0,NA,1,2,3,4), 1) If you want to go out of order or you want to set some and use default values for others, youll usually want to include parameter names: mean(na.rm=TRUE, x=c(0,NA,1,2,3,4), trim=1) ## [1] 2 mean(x=c(0,NA,1,2,3,4), na.rm=TRUE) ## [1] 2 When in doubt, use parameter names. The material presented here uses functions from external packages. When using these functions we use the notation libraryName::functionName(), e.g., dplyr::select(), so its clear where the function is coming from. "],["data-manipulation.html", "3 Data Manipulation 3.1 Common operations 3.2 Long and wide data", " 3 Data Manipulation There are multiple ways to do almost anything in R. Here we cover two groups of functions that can be used for data manipulation. The first one is base R, which describes functions that are built in to R. The second is the Tidyverse, which describes a suite of external packages that help streamline these operations. Within the tidyverse, were going to focus on the dplyr, tidyr, readr, and ggplot2 libraries. Both approaches are useful and prevalent. Having some familiarity with both will allow you to decide when you prefer and will make it easier to collaborate with other researchers. In this chapter we present common data manipulation operations by example using DJFMP trawl data obtained from the Environmental Data Initiative. The goal is to produce a dataset that contains total catch by species (across all fork lengths) for each tow at Chipps Island during May of 2017, and to include site coordinates. We carry out the process using only base R functions, then repeat the process using functions from the tidyverse packages dplyr, tidyr, and readr, as well as the lubridate package. Youll notice that the tidyverse approach to generating the desired dataset is more streamlined and compact than the base R approach. At the same time, base R functions can allow for a lot of flexibility and are less likely to change than tidyverse functions, which are frequently under development these days. We also introduce the concepts of long data and wide data, which will be important in later chapters. 3.1 Common operations This example uses the following operations: read in data from a file reformat existing fields and add new fields subset/filter join different datasets together select fields to keep group and summarize/aggregate handle missing values sort data according to specific fields write data to a file 3.1.1 Base R Read in data: trawl_file &lt;- file.path(root,&quot;data&quot;,&quot;edi.244.8_abridged&quot;, &quot;2017-2021_DJFMP_chipps_trawl_fish_and_water_quality_data.csv&quot;) station_file &lt;- file.path(root,&quot;data&quot;,&quot;edi.244.8_abridged&quot;,&quot;DJFMP_Site_Locations.csv&quot;) trawl_data &lt;- read.csv(trawl_file, stringsAsFactors=FALSE) station_data &lt;- read.csv(station_file, stringsAsFactors=FALSE) trawl_data: Location RegionCode StationCode SampleDate SampleTime MethodCode GearConditionCode WeatherCode DO WaterTemp Turbidity Secchi SpecificConductance TowNumber SamplingDirection TowDuration FlowDebris SiteDisturbance AlternateSite SeineLength SeineWidth SeineDepth FlowmeterStart FlowmeterEnd FlowmeterDifference Volume OrganismCode IEPFishCode CommonName MarkCode StageCode Expression ForkLength RaceByLength TagCode RaceByTag ArchivalID SpecialStudyID GeneticID Probability1 GeneticID2 Probability2 SexGeneID Ots28 Lab GeneticTest GeneticModel Count Year Month Chipps Island 3 SB018S 2017-01-03 07:39:00 MWTR 1 RAN 13.04 8.1 42.5 0.36 199.4 1 D 20 N NA NA NA NA NA 584752 627607 42855 21397.52 AMS AMESHA American shad None NA NA 70 NA NA NA NA NA NA NA NA NA NA NA NA NA 1 2017 1 Chipps Island 3 SB018S 2017-01-03 07:39:00 MWTR 1 RAN 13.04 8.1 42.5 0.36 199.4 1 D 20 N NA NA NA NA NA 584752 627607 42855 21397.52 AMS AMESHA American shad None NA NA 71 NA NA NA NA NA NA NA NA NA NA NA NA NA 1 2017 1 Chipps Island 3 SB018S 2017-01-03 07:39:00 MWTR 1 RAN 13.04 8.1 42.5 0.36 199.4 1 D 20 N NA NA NA NA NA 584752 627607 42855 21397.52 AMS AMESHA American shad None NA NA 75 NA NA NA NA NA NA NA NA NA NA NA NA NA 1 2017 1 Chipps Island 3 SB018S 2017-01-03 07:39:00 MWTR 1 RAN 13.04 8.1 42.5 0.36 199.4 1 D 20 N NA NA NA NA NA 584752 627607 42855 21397.52 AMS AMESHA American shad None NA NA 94 NA NA NA NA NA NA NA NA NA NA NA NA NA 1 2017 1 Chipps Island 3 SB018S 2017-01-03 07:39:00 MWTR 1 RAN 13.04 8.1 42.5 0.36 199.4 1 D 20 N NA NA NA NA NA 584752 627607 42855 21397.52 CHN CHISAL Chinook salmon AdClipped 5 NA 144 NA 55862 LateFall NA NA NA NA NA NA NA NA NA NA 1 2017 1 Chipps Island 3 SB018S 2017-01-03 07:39:00 MWTR 1 RAN 13.04 8.1 42.5 0.36 199.4 1 D 20 N NA NA NA NA NA 584752 627607 42855 21397.52 LFS LONSME longfin smelt None NA E 93 NA NA NA NA NA NA NA NA NA NA NA NA NA 1 2017 1 station_data: MethodCode Location StationCode Latitude Longitude SEIN American River AM001S 38.59936 -121.5057 SEIN Kings Island DS002S 38.05877 -121.4584 SEIN Georgiana Slough GS010E 38.22586 -121.5272 SEIN Liberty Island LI001E 38.24197 -121.6823 SEIN Liberty Island LI001W 38.27744 -121.6942 SEIN Liberty Island LI002E 38.24636 -121.6781 Reformat and add new fields: trawl_data$SampleDate &lt;- as.Date(trawl_data$SampleDate) trawl_data$Year &lt;- as.numeric(format(trawl_data$SampleDate, &quot;%Y&quot;)) trawl_data$Month &lt;- as.numeric(format(trawl_data$SampleDate, &quot;%m&quot;)) Subet/filter: unique(trawl_data$Location) ## [1] &quot;Chipps Island&quot; chipps_data &lt;- subset(trawl_data, Year == 2017 &amp; Month == 5 &amp; Location == &quot;Chipps Island&quot;) Join: chipps_data &lt;- merge(x=chipps_data, y=station_data, by=c(&quot;MethodCode&quot;,&quot;Location&quot;,&quot;StationCode&quot;), all.x=TRUE) MethodCode Location StationCode RegionCode SampleDate SampleTime GearConditionCode WeatherCode DO WaterTemp Turbidity Secchi SpecificConductance TowNumber SamplingDirection TowDuration FlowDebris SiteDisturbance AlternateSite SeineLength SeineWidth SeineDepth FlowmeterStart FlowmeterEnd FlowmeterDifference Volume OrganismCode IEPFishCode CommonName MarkCode StageCode Expression ForkLength RaceByLength TagCode RaceByTag ArchivalID SpecialStudyID GeneticID Probability1 GeneticID2 Probability2 SexGeneID Ots28 Lab GeneticTest GeneticModel Count Year Month Latitude Longitude MWTR Chipps Island SB018M 3 2017-05-01 07:30:00 1 CLR 12.87 15.9 30.3 0.63 96.4 1 D 20 N NA NA NA NA NA 518147 560176 42029 20985.09 CHN CHISAL Chinook salmon AdClipped 5 NA 76 NA 60968 Fall NA NA NA NA NA NA NA NA NA NA 2 2017 5 38.04598 -121.9099 MWTR Chipps Island SB018M 3 2017-05-01 07:30:00 1 CLR 12.87 15.9 30.3 0.63 96.4 1 D 20 N NA NA NA NA NA 518147 560176 42029 20985.09 CHN CHISAL Chinook salmon AdClipped 5 NA 76 NA 60969 Fall NA NA NA NA NA NA NA NA NA NA 1 2017 5 38.04598 -121.9099 MWTR Chipps Island SB018M 3 2017-05-01 07:30:00 1 CLR 12.87 15.9 30.3 0.63 96.4 1 D 20 N NA NA NA NA NA 518147 560176 42029 20985.09 CHN CHISAL Chinook salmon AdClipped 5 NA 80 NA 60969 Fall NA NA NA NA NA NA NA NA NA NA 1 2017 5 38.04598 -121.9099 MWTR Chipps Island SB018M 3 2017-05-01 07:30:00 1 CLR 12.87 15.9 30.3 0.63 96.4 1 D 20 N NA NA NA NA NA 518147 560176 42029 20985.09 CHN CHISAL Chinook salmon AdClipped 5 NA 83 NA 60969 Fall NA NA NA NA NA NA NA NA NA NA 2 2017 5 38.04598 -121.9099 MWTR Chipps Island SB018M 3 2017-05-01 07:30:00 1 CLR 12.87 15.9 30.3 0.63 96.4 1 D 20 N NA NA NA NA NA 518147 560176 42029 20985.09 CHN CHISAL Chinook salmon AdClipped 5 NA 86 NA 60969 Fall NA NA NA NA NA NA NA NA NA NA 1 2017 5 38.04598 -121.9099 MWTR Chipps Island SB018M 3 2017-05-01 07:30:00 1 CLR 12.87 15.9 30.3 0.63 96.4 1 D 20 N NA NA NA NA NA 518147 560176 42029 20985.09 CHN CHISAL Chinook salmon AdClipped 5 NA 87 NA 56080 Fall NA NA NA NA NA NA NA NA NA NA 1 2017 5 38.04598 -121.9099 Select fields: chipps_data &lt;- chipps_data[ ,c(&quot;Location&quot;,&quot;StationCode&quot;,&quot;Longitude&quot;,&quot;Latitude&quot;, &quot;SampleDate&quot;,&quot;SampleTime&quot;,&quot;MethodCode&quot;,&quot;GearConditionCode&quot;, &quot;TowNumber&quot;,&quot;Volume&quot;,&quot;WaterTemp&quot;,&quot;OrganismCode&quot;, &quot;ForkLength&quot;,&quot;Count&quot;)] Group and summarize/aggregate: # Do a little bit of checking: unique(chipps_data$Location) ## [1] &quot;Chipps Island&quot; unique(chipps_data$StationCode) ## [1] &quot;SB018M&quot; &quot;SB018N&quot; &quot;SB018S&quot; unique(chipps_data$MethodCode) ## [1] &quot;MWTR&quot; unique(chipps_data$GearConditionCode) ## [1] 1 2 # Split: chipps_data_split &lt;- split(x=chipps_data, f= ~ StationCode + SampleDate + TowNumber + OrganismCode, drop=TRUE) chipps_data_split[1:3] ## $`SB018M.2017-05-07.1.AMS` ## Location StationCode Longitude Latitude SampleDate SampleTime MethodCode GearConditionCode ## 819 Chipps Island SB018M -121.9099 38.04598 2017-05-07 07:26:00 MWTR 1 ## TowNumber Volume WaterTemp OrganismCode ForkLength Count ## 819 1 19212.08 17.8 AMS 121 1 ## ## $`SB018N.2017-05-08.1.AMS` ## Location StationCode Longitude Latitude SampleDate SampleTime MethodCode ## 1993 Chipps Island SB018N -121.9099 38.04797 2017-05-08 07:43:00 MWTR ## GearConditionCode TowNumber Volume WaterTemp OrganismCode ForkLength Count ## 1993 1 1 18785.68 17.6 AMS 130 1 ## ## $`SB018M.2017-05-10.1.AMS` ## Location StationCode Longitude Latitude SampleDate SampleTime MethodCode GearConditionCode ## 444 Chipps Island SB018M -121.9099 38.04598 2017-05-10 07:52:00 MWTR 1 ## TowNumber Volume WaterTemp OrganismCode ForkLength Count ## 444 1 15878.25 18.3 AMS 151 1 # Calculate total counts: chipps_data_list &lt;- lapply(chipps_data_split, function(x) { # These checks aren&#39;t strictly necessary, but it can be # worthwhile to check that the data are as expected: stopifnot(length(unique(x$Location)) == 1) stopifnot(length(unique(x$SampleTime)) == 1) stopifnot(length(unique(x$MethodCode)) == 1) stopifnot(length(unique(x$GearConditionCode)) == 1) stopifnot(length(unique(x$Volume)) == 1) stopifnot(length(unique(x$WaterTemp)) == 1) # Keep one row per tow: ret &lt;- x[1, ] # Remove the ForkLength field: ret$ForkLength &lt;- NULL # Sum over the counts-by-length: ret$Count &lt;- sum(x$Count) return(ret) }) chipps_data_list[1:3] ## $`SB018M.2017-05-07.1.AMS` ## Location StationCode Longitude Latitude SampleDate SampleTime MethodCode GearConditionCode ## 819 Chipps Island SB018M -121.9099 38.04598 2017-05-07 07:26:00 MWTR 1 ## TowNumber Volume WaterTemp OrganismCode Count ## 819 1 19212.08 17.8 AMS 1 ## ## $`SB018N.2017-05-08.1.AMS` ## Location StationCode Longitude Latitude SampleDate SampleTime MethodCode ## 1993 Chipps Island SB018N -121.9099 38.04797 2017-05-08 07:43:00 MWTR ## GearConditionCode TowNumber Volume WaterTemp OrganismCode Count ## 1993 1 1 18785.68 17.6 AMS 1 ## ## $`SB018M.2017-05-10.1.AMS` ## Location StationCode Longitude Latitude SampleDate SampleTime MethodCode GearConditionCode ## 444 Chipps Island SB018M -121.9099 38.04598 2017-05-10 07:52:00 MWTR 1 ## TowNumber Volume WaterTemp OrganismCode Count ## 444 1 15878.25 18.3 AMS 1 # Recombine: chipps_data_agg_base &lt;- unsplit(value=chipps_data_list, f=names(chipps_data_list)) Handle missing values: any(is.na(chipps_data_agg_base$WaterTemp)) ## [1] TRUE Location StationCode Longitude Latitude SampleDate SampleTime MethodCode GearConditionCode TowNumber Volume WaterTemp OrganismCode Count 2503 Chipps Island SB018N -121.9099 38.04797 2017-05-26 10:08:00 MWTR 1 6 21476.41 NA SPLT 1 1423 Chipps Island SB018M -121.9099 38.04598 2017-05-16 08:48:00 MWTR 1 3 22673.23 NA AMS 1 591 Chipps Island SB018M -121.9099 38.04598 2017-05-26 11:47:00 MWTR 1 10 22547.40 NA CHN 12 2406 Chipps Island SB018N -121.9099 38.04797 2017-05-26 10:57:00 MWTR 1 8 20555.20 NA CHN 10 396 Chipps Island SB018M -121.9099 38.04598 2017-05-16 08:48:00 MWTR 1 3 22673.23 NA CHN 52 907 Chipps Island SB018M -121.9099 38.04598 2017-05-26 09:15:00 MWTR 1 4 18900.52 NA CHN 13 # Example of how you might want to handle missing values: ind_missing &lt;- is.na(chipps_data_agg_base$WaterTemp) chipps_data_agg_base$WaterTemp[ind_missing] &lt;- mean(chipps_data_agg_base$WaterTemp, na.rm=TRUE) any(is.na(chipps_data_agg_base$WaterTemp)) ## [1] FALSE Sort: index_sorted &lt;- order(chipps_data_agg_base$SampleDate, chipps_data_agg_base$TowNumber, chipps_data_agg_base$OrganismCode) head(index_sorted) ## [1] 421 360 393 237 444 301 chipps_data_agg_base &lt;- chipps_data_agg_base[index_sorted, ] Location StationCode Longitude Latitude SampleDate SampleTime MethodCode GearConditionCode TowNumber Volume WaterTemp OrganismCode Count Chipps Island SB018M -121.9099 38.04598 2017-05-01 07:30:00 MWTR 1 1 20985.09 15.9 CHN 22 Chipps Island SB018M -121.9099 38.04598 2017-05-01 07:55:00 MWTR 1 2 19911.10 15.8 CHN 14 Chipps Island SB018M -121.9099 38.04598 2017-05-01 08:20:00 MWTR 1 3 19597.54 16.1 CHN 7 Chipps Island SB018M -121.9099 38.04598 2017-05-01 08:20:00 MWTR 1 3 19597.54 16.1 TSS 1 Chipps Island SB018M -121.9099 38.04598 2017-05-01 08:48:00 MWTR 1 4 20492.28 16.0 AMS 1 Chipps Island SB018M -121.9099 38.04598 2017-05-01 08:48:00 MWTR 1 4 20492.28 16.0 CHN 5 Save data: write.csv(chipps_data_agg_base, file.path(root,&quot;data&quot;,&quot;chipps_data_base.csv&quot;), row.names=FALSE) 3.1.2 Tidyverse A lot of tidyverse functions are designed to be used with pipes. Pipes are functions that facilitate the passing of data between functions, e.g., the dataset returned by one function is used as input to the next function. Tidyverse packages tend to depend on the magrittr package, which provides the %&gt;% pipe. With the release of R version 4.1.0, a pipe, |&gt;, has been added to base R. Neither pipe looks like a standard function, but the syntax is relatively simple and best explained through example. Read in data: trawl_data &lt;- readr::read_csv(trawl_file, show_col_types=FALSE) station_data &lt;- readr::read_csv(station_file, show_col_types=FALSE) Everything else: chipps_data_agg_tidy &lt;- trawl_data %&gt;% # Reformat and add new fields: dplyr::mutate(SampleDate=as.Date(SampleDate), Year=lubridate::year(SampleDate), Month=lubridate::month(SampleDate)) %&gt;% # Subset/filter: dplyr::filter(Year == 2017 &amp; Month == 5 &amp; Location == &quot;Chipps Island&quot;) %&gt;% # Join: dplyr::left_join(station_data, by=c(&quot;MethodCode&quot;,&quot;Location&quot;,&quot;StationCode&quot;)) %&gt;% # Select fields: dplyr::select(Location, StationCode, Longitude, Latitude, SampleDate, SampleTime, MethodCode, GearConditionCode, TowNumber, Volume, WaterTemp, OrganismCode, ForkLength, Count) %&gt;% # Group and summarize/aggregate: dplyr::group_by(Location, StationCode, Longitude, Latitude, SampleDate, SampleTime, MethodCode, GearConditionCode, TowNumber, Volume, WaterTemp, OrganismCode) %&gt;% dplyr::summarize(Count=sum(Count), .groups=&quot;drop&quot;) %&gt;% # Handle missing values: dplyr::mutate(WaterTemp=tidyr::replace_na(WaterTemp, mean(WaterTemp, na.rm=TRUE))) %&gt;% # Sort: dplyr::arrange(SampleDate, TowNumber, OrganismCode) %&gt;% # Save data: readr::write_csv(file=file.path(root,&quot;data&quot;,&quot;chipps_data_tidy.csv&quot;)) 3.1.3 Comparing the base and tidy datasets The base and tidy datasets should be identical except for some minor formatting differences. The code below reconciles these differences and uses the identical() function to show that they are the same. chipps_base &lt;- read.csv(file.path(root,&quot;data&quot;,&quot;chipps_data_base.csv&quot;)) chipps_tidy &lt;- read.csv(file.path(root,&quot;data&quot;,&quot;chipps_data_tidy.csv&quot;)) identical(chipps_base, chipps_tidy) ## [1] FALSE dim(chipps_base) ## [1] 451 13 dim(chipps_tidy) ## [1] 451 13 identical(names(chipps_base), names(chipps_tidy)) ## [1] TRUE for(col_name in names(chipps_base)) { if(!identical(chipps_base[ ,col_name], chipps_tidy[ ,col_name])) { print(col_name) } } ## [1] &quot;WaterTemp&quot; # WaterTemp&#39;s are the same up to some machine level precision: unique(chipps_base$WaterTemp - chipps_tidy$WaterTemp) ## [1] 0.000000e+00 -3.552714e-14 # Round WaterTemp&#39;s to one decimal place for comparison purposes: chipps_base$WaterTemp &lt;- round(chipps_base$WaterTemp, 1) chipps_tidy$WaterTemp &lt;- round(chipps_tidy$WaterTemp, 1) identical(chipps_base, chipps_tidy) ## [1] TRUE 3.2 Long and wide data Long and wide refer to different ways to structure a dataset. Different applications call for different structures, so its useful to understand what these terms mean and how to convert a dataset from one type to the other. Generally, long data will have more rows and fewer columns while wide data will have fewer rows and more columns. Heres one way to think about it: long data: all of the column names are variables, not values wide data: some of the column names are values of variables Heres another way to think about it: long data: an observation is spread out across multiple rows wide data: an observation is spread out across multiple columns Example: The following is an example of converting some Chipps trawl data from long to wide format. Here is an overview of whats going on according to the two perspectives described above: In long_data, all of the column names (StationCode, SampleDat,e etc.) are variables, or general concepts. In wide_data, the values from the OrganismCode variable are now column names with count as the corresponding value. Define an observation as a single tow. In long_data, different organism codes and counts from a single tow are spread out across rows (and other values such as date are repeated as necessary). In wide_data there is one row per tow, and tow-specific organism codes and counts data are spread out across multiple columns. Long version: long_data &lt;- read.csv(file.path(root,&quot;data&quot;,&quot;chipps_data_base.csv&quot;)) %&gt;% dplyr::select(-c(Location, SampleTime, MethodCode, GearConditionCode, WaterTemp)) StationCode Longitude Latitude SampleDate TowNumber Volume OrganismCode Count SB018M -121.9099 38.04598 2017-05-01 1 20985.09 CHN 22 SB018M -121.9099 38.04598 2017-05-01 2 19911.10 CHN 14 SB018M -121.9099 38.04598 2017-05-01 3 19597.54 CHN 7 SB018M -121.9099 38.04598 2017-05-01 3 19597.54 TSS 1 SB018M -121.9099 38.04598 2017-05-01 4 20492.28 AMS 1 SB018M -121.9099 38.04598 2017-05-01 4 20492.28 CHN 5 Wide version: wide_data &lt;- tidyr::pivot_wider(data=long_data, names_from=OrganismCode, values_from=Count, values_fill=0) StationCode Longitude Latitude SampleDate TowNumber Volume CHN TSS AMS RBT SPLT STB TFS SHM WHC BGS SAPM BKS PL NOFISH GSN TP CHC DSM SB018M -121.9099 38.04598 2017-05-01 1 20985.09 22 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 SB018M -121.9099 38.04598 2017-05-01 2 19911.10 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 SB018M -121.9099 38.04598 2017-05-01 3 19597.54 7 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 SB018M -121.9099 38.04598 2017-05-01 4 20492.28 5 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 SB018S -121.9099 38.04283 2017-05-01 5 19902.11 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 SB018S -121.9099 38.04283 2017-05-01 6 20140.28 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "],["data-visualization.html", "4 Data Visualization", " 4 Data Visualization Time series (calculate and plot CPUE over time) Histogram of forklengths "],["exercises.html", "5 Exercises", " 5 Exercises -calculating work stats -still need to do the extra query -how to determine number of (unique) tows? -  cant just look at number of rows because tows may be repeated depending on catches (overestimate)  calls for wide formatting  regular expressions "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
